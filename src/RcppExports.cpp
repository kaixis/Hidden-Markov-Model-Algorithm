// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// ctmcViterbi
IntegerVector ctmcViterbi(NumericVector ts, double theta, NumericMatrix obs);
RcppExport SEXP _kaixisHW4_ctmcViterbi(SEXP tsSEXP, SEXP thetaSEXP, SEXP obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ts(tsSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type obs(obsSEXP);
    rcpp_result_gen = Rcpp::wrap(ctmcViterbi(ts, theta, obs));
    return rcpp_result_gen;
END_RCPP
}
// backwardLoop
void backwardLoop(NumericMatrix& obs, NumericMatrix& beta, NumericVector& ts, double theta);
RcppExport SEXP _kaixisHW4_backwardLoop(SEXP obsSEXP, SEXP betaSEXP, SEXP tsSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type ts(tsSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    backwardLoop(obs, beta, ts, theta);
    return R_NilValue;
END_RCPP
}
// forwardLoop
void forwardLoop(NumericMatrix& obs, NumericMatrix& alpha, NumericVector& ts, double theta);
RcppExport SEXP _kaixisHW4_forwardLoop(SEXP obsSEXP, SEXP alphaSEXP, SEXP tsSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type ts(tsSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    forwardLoop(obs, alpha, ts, theta);
    return R_NilValue;
END_RCPP
}
// ctmcForwardBackward
NumericVector ctmcForwardBackward(NumericVector ts, double theta, NumericMatrix obs);
RcppExport SEXP _kaixisHW4_ctmcForwardBackward(SEXP tsSEXP, SEXP thetaSEXP, SEXP obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ts(tsSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type obs(obsSEXP);
    rcpp_result_gen = Rcpp::wrap(ctmcForwardBackward(ts, theta, obs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_kaixisHW4_ctmcViterbi", (DL_FUNC) &_kaixisHW4_ctmcViterbi, 3},
    {"_kaixisHW4_backwardLoop", (DL_FUNC) &_kaixisHW4_backwardLoop, 4},
    {"_kaixisHW4_forwardLoop", (DL_FUNC) &_kaixisHW4_forwardLoop, 4},
    {"_kaixisHW4_ctmcForwardBackward", (DL_FUNC) &_kaixisHW4_ctmcForwardBackward, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_kaixisHW4(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
